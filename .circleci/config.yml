version: 2.1
orbs:
  node: circleci/node@4.3.0
  slack: circleci/slack@4.3.3  
  
  
commands:
  destroy-environment:
    description: Destroy Cloud Formation Stacks and infrastructure
    parameters:
      when:
        type: string
      id:
        type: string
    steps:
      - run:
          name:  backend  destroying
          command: |
            aws cloudformation delete-stack --stack-name backend-<< parameters.id >>
          when: << parameters.when >>
      - run:
          name: frontend destroying
          command: |
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID} --recursive
            aws cloudformation delete-stack --stack-name frontend-<< parameters.id >>
          when: << parameters.when >>
          

  rrevert-migrations:
    description: Revert$the$last$migration$if$success 
    parameters:
      when:
        type: string
      id:
        type: string    
    steps:
      - run:
          name: Revert$migrations
          working_directory: ./backend          
          # Add when this will run
          when: << parameters.when >>          
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS=$(curl -H "token: 80a781fe-ea5c-4cf5-8fff-154a71066dd4" --request GET https://api.memstash.io/values/MIGRATION_<< parameters.id >>)
            if [[ "$SUCCESS" == "success" ]]
            then
              npm run migrations:revert
            fi

         
jobs:
#start with building 


###################build####################
#backend
  df-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: installing the   npm
          working_directory: ./backend
          command: npm install
      - persist_to_workspace:
          root: .
          paths:
            - backend/node_modules

#frontend
  df-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
        - checkout
        - run:
            name: installing the   npm
            working_directory: ./frontend
            command: npm install
        - persist_to_workspace:
            root: .
            paths:
              - frontend/node_modules

###backend building
  backend-building:
    docker:
      - image: circleci/node:13.8.0  
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: npm run build
          working_directory: ./backend
          command: npm run build
      - slack/notify:
          event: fail
          template: basic_fail_1
      - persist_to_workspace:
          root: .
          paths:
            - backend/dist

##### building frontend
  frontend-building:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: npm run build
          working_directory: ./frontend
          command: npm run build
      - slack/notify:
          event: fail
          template: basic_fail_1
          
          
    
#################test##################
 #frontend
  frontend-testing:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: my fronend&test 
          working_directory: ./frontend
          command: 
            npm add --dev jest-junit
            npm run test --reporters=jest-junit

#backend              
  backend-testing:
    docker:
      - image: circleci/node:13.8.0

    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: my backend&test 
          working_directory: ./backend
          command: npm test -- --ci --runInBand


##################Analyze######################
#scan frontend
  scan-frontend:
    docker:
     - image: circleci/node:13.8.0

    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: checkking the securoty of frontend
          working_directory: ./frontend
          command: |
              npm audit fix --audit-level=critical 
              npm audit --audit-level=critical


#scan backend
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run: 
          name: checking the security of backend 
          working_directory: ./backend
          command: |
                 npm audit fix --audit-level=critical 
                 npm audit --audit-level=critical


##########Deploy infrastructure #########
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout

      - run:
          name: Installing_tar_utilit
          command: yum install -y tar gzip
          
      - run:
          name: make sure of frontend infrastructure
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=frontend-${CIRCLE_WORKFLOW_ID} \
              --stack-name "frontend-${CIRCLE_WORKFLOW_ID}" \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID}"  
              
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=backend-${CIRCLE_WORKFLOW_ID} \
              --stack-name "backend-${CIRCLE_WORKFLOW_ID}" \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID}"  

      - run:
          name: IP of backend
          command: |
            BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=backend-${CIRCLE_WORKFLOW_ID}" \
              --output text)
            curl -H "Content-Type: text/plain" -H "token: e26a89ee-00ad-437d-b74c-bb66ee0bd636" --request PUT --data "http://$BACKEND_IP:3030" https://api.memstash.io/values/BACKEND_URL
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID}
          when: on_fail  
       
      - rrevert-migrations:
          id: ${CIRCLE_WORKFLOW_ID}
          when: on_fail           
      
################## configure infrastructure ##################

#configure infrastructure
  configure-infrastructure:
    docker:
      - image: python:3.9.0-alpine      
    steps:
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["a7:cf:a5:57:ea:e9:9c:9f:1a:a8:5f:c2:3a:d8:08:87"]
      # attach workspace
      - attach_workspace:
          at: .      
      - run:
          name: dependecny installing 
          working_directory: ./.circleci/ansible
          command: |
            apk add --update ansible curl rsync openssh nodejs npm
            pip install awscli
      - run:
          name: provide my ip backend
          working_directory: ./.circleci/ansible
          command: |
            PUBLIC_URL=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:project,Values=backend-${CIRCLE_WORKFLOW_ID}" --output text)
            echo $PUBLIC_URL
            echo "[web]" > ./inventory.txt
            echo ${PUBLIC_URL} >> ./inventory.txt
                
      - run:
          name: server configurtion
          command: |
            cd ./.circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
      - persist_to_workspace:
          root: .
          paths:
            - .circleci/ansible/inventory.txt    
      # Here's where you will add some code to rollback on failure   
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID}
          when: on_fail  
       
      - rrevert-migrations:
          id: ${CIRCLE_WORKFLOW_ID}
          when: on_fail   
      
          
          
#############DEploying##############
######Database Migration
  migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: installing the dependinces
          command: |
            sudo apt-get update && sudo apt-get install -yy less
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
             

      - run:
          name: running
          working_directory: ./backend
          command: |
            touch .env
            echo ENVIROMENT=production > .env
            echo TYPEORM_CONNECTION=postgres >> .env
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> .env
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> .env
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> .env
            echo TYPEORM_HOST=$TYPEORM_HOST >> .env
            echo TYPEORM_PORT=$TYPEORM_PORT >> .env
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> .env
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> .env
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> .env  
            
            cat .env
            npm i
            echo "HOST: " $TYPEORM_HOST
            echo "PWD: " $(pwd)
            echo $TYPEORM_DATABASE          
            
            npm run migrations > migration_status
            if grep -q "has been executed successfully" migration_status
            then
              echo "success"
              curl -H "Content-Type: text/plain" -H "token: 80a781fe-ea5c-4cf5-8fff-154a71066dd4" --request PUT --data "success" https://api.memstash.io/values/MIGRATION_${CIRCLE_WORKFLOW_ID}
            else
              echo " failed  verify database"
              curl -H "Content-Type: text/plain" -H "token: 80a781fe-ea5c-4cf5-8fff-154a71066dd4" --request PUT --data "failure" https://api.memstash.io/values/MIGRATION_${CIRCLE_WORKFLOW_ID}
            fi
            echo "WorkflowID=${CIRCLE_WORKFLOW_ID}"
      
      
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID}
          when: on_fail
          
#################### deploying#####################
#########3backend deployment 
  backendeploying:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.9.0-alpine      
    steps:
      # Checkout code from git
      - checkout
      - add_ssh_keys:
          fingerprints: ["a7:cf:a5:57:ea:e9:9c:9f:1a:a8:5f:c2:3a:d8:08:87"]
      # attach workspace
      - attach_workspace:
          at: .
      - run:
          name: Installing our  deppendencies 
          working_directory: /tmp
          command: |
            apk add --update ansible curl rsync openssh nodejs npm
            ansible --version
            pip install awscli
            aws --version
      - run:
          name: backend deploying
          working_directory: ./.circleci/ansible
          command: |
            ansible-playbook -i inventory.txt deploy-backend.yml --ssh-common-args='-o StrictHostKeyChecking=no'

      # Here's where you will add some code to rollback on failure  
     
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID}
          when: on_fail
      - rrevert-migrations:
          id: ${CIRCLE_WORKFLOW_ID}
          when: on_fail
          
###frontend
  fronted_deploying:
    docker:
      # Docker image here that supports AWS CLI
      - image: python:3.9.0-alpine     
    steps:
      # Checkout code from git
      - checkout
      - attach_workspace:
          at: .      
      - run:
          name: our depenincies 
          working_directory: /tmp
          command: |
            apk add --update ansible curl rsync openssh nodejs npm
            pip install awscli
      - run:
          name: builing frontend 
          working_directory: ./frontend
          command: |
            export API_URL=$(curl -H "token: e26a89ee-00ad-437d-b74c-bb66ee0bd636" --request GET https://api.memstash.io/values/BACKEND_URL)
            echo "${API_URL}"
            npm run build
      - run:
          name: Deploy the  frontend 
          working_directory: ./frontend          
          command: |
            aws s3 cp ./dist "s3://udapeople-${CIRCLE_WORKFLOW_ID}" --recursive
      
      - persist_to_workspace:
          root: .
          paths:
            - frontend/dist      
            
      # Here's where you will add some code to rollback on failure      
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID}
          when: on_fail
      - rrevert-migrations:
          id: ${CIRCLE_WORKFLOW_ID}
          when: on_fail   
          
  
  
 ############smoke test############        
  smoke-test:
    docker:
      # Lightweight Docker image 
      - image: python:3.9.0-alpine
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: our  &dependencies&
          working_directory: /tmp
          command: |
            apk add --update curl nodejs npm
            pip install awscli
            
      - run:
          name: smoke test baccckend
          working_directory: ./backend
          command: |
            export BACKEND_URL=$(curl -H "token: e26a89ee-00ad-437d-b74c-bb66ee0bd636" --request GET https://api.memstash.io/values/BACKEND_URL)
            echo $BACKEND_URL
            if curl  "$BACKEND_URL/api/status" | grep "ok"
            then
              return 0
            else
              return 1
            fi            
           
            
      - run:
          name: Frontend smoke test
          working_directory: ./backend
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID}.s3-website.us-west-2.amazonaws.com/"
            echo URL
            curl -s ${URL} | grep -q "Welcome"
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID}
          when: on_fail  
       
      - rrevert-migrations:
          id: ${CIRCLE_WORKFLOW_ID}
          when: on_fail   
    
######cloundfront
  cloudfront-update:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli      
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: our  dependencies
          command: |
            yum install -y tar gzip curl
            curl -sL https://rpm.nodesource.com/setup_10.x | bash -
            yum install -y nodejs
      - run:
          name: storing
          working_directory: ./.circleci/files
          command: |
            WorkflowID=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text)
            curl -H "Content-Type: text/plain" -H "token: 50d275bc-efbf-466c-8d7b-96eddd7b34bc" --request PUT --data "$WorkflowID" https://api.memstash.io/values/WorkflowID
      - run:
          name: updating
          working_directory: ./.circleci/files
          command: |
            aws cloudformation deploy \
              --template-file cloudfront.yml \
              --stack-name udapeople-cloudfront-ohlolcfuiv \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID}" \
              --tags project=udapeople
     
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID}
          when: on_fail              
      - rrevert-migrations:
          id: ${CIRCLE_WORKFLOW_ID}
          when: on_fail
          
          
#########clean up 
  cleanup:
      docker:
        # Docker image here
        - image: amazon/aws-cli
      steps:
        # Checkout code from git
        - checkout
        - run:
            name: cleaning old stack 
            command: |
              # your code here
              OldWorkflowID=$(curl -H "token: 50d275bc-efbf-466c-8d7b-96eddd7b34bc" --request GET https://api.memstash.io/values/WorkflowID)
              CurrentWorkflowID=${CIRCLE_WORKFLOW_ID}
              echo $OldWorkflowID
              echo $CurrentWorkflowID
              if [[ "$CurrentWorkflowID" != "$OldWorkflowID" ]]
              then
                echo "$OldWorkflowID!=$CurrentWorkflowID => older version will be deleted"
                aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
                aws cloudformation delete-stack --stack-name "frontend-${OldWorkflowID}"
                aws cloudformation delete-stack --stack-name "backend-${OldWorkflowID}"
              else
                echo "$OldWorkflowID==$CurrentWorkflowID => nothing new"
              fi  

workflows:
  default:
    jobs:
      - df-frontend
      - df-backend
      - frontend-building:
          requires: [df-frontend]
      - backend-building:
          requires: [df-backend]
      - frontend-testing:
          requires: [frontend-building]
      - backend-testing:
          requires: [backend-building]
      - scan-backend:
          requires: [backend-building]
      - scan-frontend:
          requires: [frontend-building]
      - deploy-infrastructure:
          requires: [frontend-testing,backend-testing, scan-frontend, scan-backend]
          filters:
            branches:
              only: 
                 master
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - migrations:
          requires: [configure-infrastructure]
    
      - fronted_deploying:
          requires: [migrations]
      - backendeploying:
          requires: [migrations]
      - smoke-test:
         requires: [backendeploying,fronted_deploying]
      - cloudfront-update:
           requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]


